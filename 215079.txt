Марио Стојмановски 215079 Лаб.1 Софтверско инженерство
Чекор 1:
  При започнување со лабораториската вежба прво што го направив е инсталирав Git, за потоа да се најавам на мојот Github акаунт кој го
  имам направено пред скоро година дена кога имав потреба да го користам за лабораториска вежба по предметот Основи на Веб дизајн.
Чекор 2:
  Во овој чекор влегувам во settings/repositories и притоа го менувам името на главната гранка од "main" во "master".
Чекор 3:
  За да креирам remote репозиториум на Github потребно е да одам во repositories и да отворам нов репозиториум со помош на "new".
  При клик на "new" се префрлам на друга страница каде што од мене се бара да го креирам овој репозиториум.За името на репозиториум го
  ставам името кое претходно ми е зададено во документот со чекори поточно "SI_2023_lab1_215079" и го правиме да биде приватен репозиториум.
Чекор 4:
  По направен директориум ист како оддалечениот репозиториум влегуваме во директориумот со помош на GitBash и пишуваме " $ git init "
  и со тоа го иницијализираме Git во директориумот.
Чекор 5:
  Локалниот репозиториум со одалечениот репозиториум го поврзуваме со неколку команди како што се:
     $ git remote add origin git@github.com:MarioStojmanovski10/SI_2023_lab1_215079.git
  и доколку сакаме да направиме push на одалечениот репозиториум користиме:
     $ git push -u origin master
Чекор 6:
  Датотека со име,презиме и индекс правиме со помош на командата:
     $ echo "Mario Stojmanovski, 215079" >> README.md
  Потоа за да ја додадеме датотеката користиме:
     $ git add README.md
  За да направиме commit со порака "Initial commit" ја користиме командата:
     $ git commit -m "Initial commit"
  А со нареднава команда оваа датотека ќе ја поставиме на одалечениот репозиториум:
     $ git push -u origin master
Чекор 7:
  Овој чекор го правиме слично како и претходниот само наместо README.md фајл ќе биде .java фајл истотака и содржината 
  ќе биде различна односно ќе го содржи дадениот код.И овој фајл го поставуваме на одалечениот репозиториум па така на remote
  репозиториумот веќе имаме два фајла README.md и SILab1.java.
Чекор 8:
  Во овој чекор нема потреба да се синхронизираме бидејќи оваа го направивме веќе во претходните 2 чекори.Тука треба само да 
  ги прочитаме кои се грешките во кодот и од наредните чекори да ги поправиме.
Чекор 9:
  Во 9 чекор гранките ги правиме со помош на командата:
     $ git branch bug1
     $ git branch bug2
     $ git branch bug3
Чекор 10:
  Следнава команда ја користиме за да се префрлиме на гранката bug1:
     $ git checkout bug1
Чекор 11:
  Прво ја поправаме грешката во кодот одностно во for циклусот наместо <= ставаме само <.
  Потоа одиме на Git и ја пишуваме командата со која ќе влеземо во SILab1.java фајлот и ќе го измениме кодот.
    $ git nano SILab1.java па потоа бидејќи фајлот ќе биде modified мора да користиме и $ git add SILab1.java a на крај користиме 
    $ git commit -m "Fix wrong loop for reading"
Чекор 12:
    $ checkout bug2
Чекор 13:
  Прво ја поправаме грешката во кодот одностно во for циклусот наместо <= ставаме само <.
  Потоа одиме на Git и ја пишуваме командата со која ќе влеземо во SILab1.java фајлот и ќе го измениме кодот.
    $ git nano SILab1.java па потоа бидејќи фајлот ќе биде modified мора да користиме и $ git add SILab1.java a на крај користиме 
    $ git commit -m "Fix wrong condition in filterOddNumbers"
Чекор 14:
    $ git checkout bug3
Чекор 15:
  Прво ја поправаме грешката во кодот одностно во for циклусот наместо <= ставаме само <.
  Потоа одиме на Git и ја пишуваме командата со која ќе влеземо во SILab1.java фајлот и ќе го измениме кодот.
    $ git nano SILab1.java па потоа бидејќи фајлот ќе биде modified мора да користиме и $ git add SILab1.java a на крај користиме 
    $ git commit -m "Fix wrong condition in SumEvenNumbers"
Чекор 16:
    $ git push -u origin bug1
    $ git push -u origin bug2
    $ git push -u origin bug3
Чекор 17:
    $ git checkout master
Чекор 18:
    $ git merge bug1
  Соединувањето на master со bug1 е успешно извршено и со техника на Fast Forward
Чекор 19:
    $ git push -u origin master
    $ git push -u origin bug1
    $ git push -u origin bug2
    $ git push -u origin bug3
Чекор 20:
    $ git merge bug2
Чекор 21:
    $ git push -u origin master
    $ git push -u origin bug1
    $ git push -u origin bug2
    $ git push -u origin bug3
Чекор 22:
    $ git checkout bug3
Чекор 23:
    $ git rebase master
Чекор 24:
    $ git checkout master
Чекор 25:
    $ git merge bug3
Чекор 26:
    $ git push -u origin master
    $ git push -u origin bug1
    $ git push -u origin bug2
    $ git push -u origin bug3
    $ git push --force
Чекор 27:
    $ touch logs.txt
    $ touch 215079.txt
Чекор 28: 
  Во овој чекор ги завршуваме првите 28 чекори успешно и за крај ги синхронизирам податоците
  со одалечениот репозиториум.
